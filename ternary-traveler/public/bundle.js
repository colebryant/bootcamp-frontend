(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// The purpose of this module is to provide a template for fetch requests to database.json
const data = {
  fetchRequest(fetchObject) {
    let dataSet = fetchObject.dataSet;
    let fetchType = fetchObject.fetchType;
    let specificId = fetchObject.specificId;
    let databaseObject = fetchObject.databaseObject;

    if (fetchType === "GET" && specificId) {
      return fetch(`http://localhost:8088/${dataSet}/${specificId}`).then(response => response.json());
    } else if (fetchType === "GET") {
      return fetch(`http://localhost:8088/${dataSet}`).then(response => response.json());
    } else if (fetchType === "POST") {
      return fetch(`http://localhost:8088/${dataSet}`, {
        method: fetchType,
        headers: {
          "Content-Type": "application/json; charset=utf-8"
        },
        body: JSON.stringify(databaseObject)
      });
    } else if (fetchType === "DELETE") {
      return fetch(`http://localhost:8088/${dataSet}/${specificId}`, {
        method: fetchType,
        headers: {
          "Content-Type": "application/json; charset=utf-8"
        }
      });
    } else if (fetchType === "PUT") {
      return fetch(`http://localhost:8088/${dataSet}/${specificId}`, {
        method: fetchType,
        headers: {
          "Content-Type": "application/json; charset=utf-8"
        },
        body: JSON.stringify(databaseObject)
      });
    } else {
      console.log("fetch didn't work");
    }
  }

};
var _default = data;
exports.default = _default;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _data = _interopRequireDefault(require("./data"));

var _eventListeners = _interopRequireDefault(require("./eventListeners"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The purpose of this module is
const domBuilder = {
  createInputForm() {
    const output = $("#output");
    const formContainer = $("<form>").addClass("formContainer").appendTo(output);
    $("<section>", {
      id: "cardsContainer"
    }).appendTo(output);
    $("<h2>").text("Enter A New Point of Interest").appendTo(formContainer);
    $("<fieldset>").append($("<label>", {
      for: "pointName"
    }).text("Name:")).append($("<input>", {
      type: "text",
      name: "pointName",
      id: "pointName"
    })).appendTo(formContainer);
    $("<fieldset>").append($("<label>", {
      for: "pointDescription"
    }).text("Description:")).append($("<textarea>", {
      type: "text",
      name: "pointDescription",
      wrap: "soft",
      id: "pointDescription"
    })).appendTo(formContainer);
    $("<fieldset>").append($("<label>", {
      for: "pointCost"
    }).text("Cost of Visiting:")).append($("<input>", {
      type: "text",
      name: "pointCost",
      id: "pointCost"
    })).appendTo(formContainer);
    const dropdownContainer = $("<fieldset>").append($("<label>", {
      for: "pointLocation"
    }).text("Select Location:")).appendTo(formContainer);
    const dropdownSelect = $("<select>", {
      name: "pointLocation",
      id: "pointLocation"
    }).appendTo(dropdownContainer);

    _data.default.fetchRequest({
      dataSet: "places",
      fetchType: "GET"
    }).then(locations => {
      locations.forEach(location => {
        $("<option>", {
          value: location.name
        }).text(location.name).appendTo(dropdownSelect);
      });
    });

    $("<button>", {
      id: "saveButton"
    }).text("Save").click(_eventListeners.default.handleSaveButton).appendTo(formContainer);
  },

  createPointCard(pointObject) {
    const pointContainer = $("<article>", {
      id: `pointCard--${pointObject.id}`
    }).addClass("pointCard");
    $("<h3>").text(pointObject.name).appendTo(pointContainer);
    $("<p>").text(`Description: ${pointObject.description}`).appendTo(pointContainer);
    $("<p>").text(`Cost of Visiting: ${pointObject.cost}`).appendTo(pointContainer);
    $("<p>").text(`Review: ${pointObject.review}`).appendTo(pointContainer);
    $("<button>", {
      id: "deleteButton"
    }).text("Delete").click(_eventListeners.default.handleDeleteButton).appendTo(pointContainer);
    $("<button>", {
      id: "editButton"
    }).text("Edit").click(_eventListeners.default.handleEditButton).appendTo(pointContainer);
    return pointContainer;
  },

  createEditForm(containerId, pointObject) {
    const editContainer = $("<form>", {
      id: `pointEdit--${containerId}`
    }).addClass("pointEdit");
    $("<h3>").text(pointObject.name).appendTo(editContainer);
    $("<fieldset>").append($("<label>", {
      for: "pointCostEdit"
    }).text("Edit Cost:")).append($("<input>", {
      type: "text",
      name: "pointCostEdit",
      id: `pointCostEdit--${containerId}`
    }).val(pointObject.cost)).appendTo(editContainer);
    $("<fieldset>").append($("<label>", {
      for: "pointReviewEdit"
    }).text("Add/Edit the Review:")).append($("<textarea>", {
      type: "text",
      name: "pointReviewEdit",
      wrap: "soft",
      id: `pointReviewEdit--${containerId}`
    }).val(pointObject.review)).appendTo(editContainer);
    $("<button>", {
      id: "submitButton"
    }).text("Submit").click(_eventListeners.default.handleSubmitButton).appendTo(editContainer);
    const currentContainer = $(`#pointCard--${containerId}`);
    currentContainer.empty();
    currentContainer.append(editContainer);
  },

  createConfirmationPopup(containerId) {
    const popupContainer = $("<section>", {
      id: `popupContainer--${containerId}`
    }).addClass("popupContainer").append($("<p>").text("Are you sure you want to delete this card?")).append($("<button>", {
      id: "confirmButton"
    }).text("Yes").click(_eventListeners.default.handleConfirmButton)).append($("<button>", {
      id: "denyButton"
    }).text("No").click(_eventListeners.default.handleDenyButton));
    return popupContainer;
  },

  appendPointCards() {
    $("#cardsContainer").empty();

    _data.default.fetchRequest({
      dataSet: "interests",
      fetchType: "GET"
    }).then(points => {
      points.forEach(point => {
        const pointCard = this.createPointCard(point);
        $("#cardsContainer").append(pointCard);
      });
    });
  }

};
var _default = domBuilder;
exports.default = _default;

},{"./data":1,"./eventListeners":3}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _data = _interopRequireDefault(require("./data"));

var _domBuilder = _interopRequireDefault(require("./domBuilder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The purpose of this module is to create all the event listeners functions to be used in the app
const eventListeners = {
  handleSaveButton() {
    const nameInputted = $("#pointName").val();
    const descriptionInputted = $("#pointDescription").val();
    const costInputted = $("#pointCost").val();
    const locationSelected = $("#pointLocation").val();

    _data.default.fetchRequest({
      dataSet: "places",
      fetchType: "GET"
    }).then(locations => {
      locations.forEach(location => {
        if (location.name === locationSelected) {
          _data.default.fetchRequest({
            dataSet: "interests",
            fetchType: "POST",
            databaseObject: {
              placeId: location.id,
              name: nameInputted,
              description: descriptionInputted,
              cost: costInputted,
              review: ""
            }
          }).then(() => {
            _domBuilder.default.appendPointCards();
          });
        }

        ;
      });
    });
  },

  handleDeleteButton() {
    const currentContainerId = event.target.parentNode.id.split("--")[1];

    const confirmationModal = _domBuilder.default.createConfirmationPopup(currentContainerId);

    $("#output").append(confirmationModal);
  },

  handleConfirmButton() {
    const idToDelete = event.target.parentNode.id.split("--")[1];
    const currentContainerId = event.target.parentNode.id;

    _data.default.fetchRequest({
      dataSet: "interests",
      fetchType: "DELETE",
      specificId: idToDelete
    }).then(() => {
      _domBuilder.default.appendPointCards();

      $(`#${currentContainerId}`).remove();
    });
  },

  handleDenyButton() {
    const currentContainerId = event.target.parentNode.id;
    $(`#${currentContainerId}`).remove();
  },

  handleEditButton() {
    const idToEdit = event.target.parentNode.id.split("--")[1];

    _data.default.fetchRequest({
      dataSet: "interests",
      fetchType: "GET",
      specificId: idToEdit
    }).then(interest => {
      _domBuilder.default.createEditForm(idToEdit, interest);
    });
  },

  handleSubmitButton() {
    const currentEditId = event.target.parentNode.id.split("--")[1];

    _data.default.fetchRequest({
      dataSet: "interests",
      fetchType: "GET",
      specificId: currentEditId
    }).then(interest => {
      _data.default.fetchRequest({
        dataSet: "interests",
        fetchType: "PUT",
        specificId: currentEditId,
        databaseObject: {
          id: interest.id,
          placeid: interest.placeId,
          name: interest.name,
          description: interest.description,
          cost: $(`#pointCostEdit--${currentEditId}`).val(),
          review: $(`#pointReviewEdit--${currentEditId}`).val()
        }
      }).then(() => {
        _domBuilder.default.appendPointCards();
      });
    });
  }

};
var _default = eventListeners;
exports.default = _default;

},{"./data":1,"./domBuilder":2}],4:[function(require,module,exports){
"use strict";

var _domBuilder = _interopRequireDefault(require("./domBuilder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The purpose of the module is
_domBuilder.default.createInputForm();

_domBuilder.default.appendPointCards();

},{"./domBuilder":2}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
